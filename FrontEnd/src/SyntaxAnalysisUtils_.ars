// UTILS
#pragma GCC diagnostic ignored "-Wignored-qualifiers"
Token *const NO_FUNC_ARGUMENTS = (Token *const) 0x13;

// '(' is taken by Make FuncLable
static Token* GetFunctionParametrs (SyntacticCtx* ctx, int* number_of_parametr);

static Token* VarInitialization (SyntacticCtx* ctx);
static int   FuncInitialization (SyntacticCtx* ctx);

// #pragma GCC diagnostic ignored "-Wformat="

static int MakeFuncLabel (SyntacticCtx* ctx, Token** func_head = NULL);
// static VarLabel*  MakeVarLabel  (SyntacticCtx* ctx);

// PROBELM WITH FUNCTIONS AND VARIABLES HAVING SAME NAME
static int DefineName (SyntacticCtx* ctx);

///////////////////////////////////////////////////////////////////////////
// PROBELM WITH FUNCTIONS AND VARIABLES HAVING SAME NAME (it works only for var intiriliaztion)
static int DefineName(SyntacticCtx* ctx)
    {
    assertlog(ctx, EFAULT, return NOT_DECLARED);

    if (TYPE(token) != NAME)
        {
        report_syntax_error("Not a name\n");
        return NOT_DECLARED;
        }

    // what if function and variable has same name ? 
    if (IsFuncLabel (NAME_ID(token), FUNC_TABEL(ctx)) != NOT_A_LABEL)
        {
        TYPE(token) = FUNCTION;
        return FUNCTION;
        }
    
    if (GetVarLabel (NAME_ID(token), VAR_TABELS_STK(ctx)))
        {
        TYPE(token) = VARIABLE;
        return VARIABLE;
        }

    report_syntax_error("'%s' wasn't decalred\n", STRING_ARR(ctx)[NAME_ID(token)]);
    
    return NOT_DECLARED;
    } 

static int MakeFuncLabel(SyntacticCtx* ctx, Token** func_head)
    {
    assertlog(ctx, EFAULT, return BAD_ARGUMENT);

    if (TYPE(token) != FUNCTION_RET_TYPE)
        {
        report_syntax_error("No return type in function\n");
        return FAILURE;
        }
    
    Token* ret_type = token;
    POSITION(ctx)++;

    if (TYPE(token) != NAME)
        {
        report_syntax_error("No function name\n");
        return FAILURE;
        }

    Token* name = token;
    POSITION(ctx)++;
            
    
    if(TYPE(token) != EXPRESSION_OPENING_BRACKET)
        {
        report_syntax_error("Missing '(' in function head\n");
        return LFAILURE;
        }

    Token* function = token; // for head
    // POSITION(ctx)++;

    FuncLabel* label = NewFuncLabel (NAME_ID(name), RET_TYPE(ret_type));
    if (!label)
        return FAILURE;

    // set head
    if (func_head)
        {
        TYPE(function) = FUNCTION;
        LEFT(function) = name;
        
        RIGHT(name) = ret_type;

        *func_head = function;
        }

    // check for previous declaration
    int prev_decl_pos = IsFuncLabel(NAME_ID(name), FUNC_TABEL(ctx));
    if (prev_decl_pos == NOT_A_LABEL && func_head && strcmp(MAIN_NAME, STRING_ARR(ctx)[NAME_ID(name)]))
        {
        printf(purplecolor "Warning, no prototype for function '%s'\n", STRING_ARR(ctx)[label->name]);
        printf("%s:%d:%d\n", PROGRAM(ctx)-> path_to_src_file, ret_type->line, ret_type->indent);
        func_message("To do, add warning system\n\n" resetconsole);
        }
        
    if (prev_decl_pos != NOT_A_LABEL)
        {
        if (!func_head)  // this for prototype
            {
            report_syntax_error("Ebat, '%s' shadows previous declaration\n", STRING_ARR(ctx)[label->name]);
            goto FAIL_EXIT;
            }

        {   
        FuncLabel* prev_declaration =  *(FUNC_TABEL(ctx)->label_arr + prev_decl_pos);

        if (!prev_declaration)
            {
            report_syntax_error("Something went wrong, (null prev declaration ptr)\n");
            goto FAIL_EXIT;
            }

        // compare
        if (!CompareFuncLabels(label, prev_declaration))
            {
            report_syntax_error("Prototype is different from function\n");
            goto FAIL_EXIT;
            }
        
        KILL(label);

        return prev_decl_pos;
        }

        FAIL_EXIT:

        KILL(label);

        return FAILURE;
        }
    
    // how to get position ??, last + 1?
    int position = AddFuncLabel(label, FUNC_TABEL(ctx));
    $li(position)
    return position;
    } 

// '(' is taken by Make FuncLable
static Token* GetFunctionParametrs (SyntacticCtx* ctx, int* number_of_parametrs)
    {
    assertlog(ctx, EFAULT, return LNULL)

    if(OP(token) != EXPRESSION_OPENING_BRACKET)
        {
        report_syntax_error("Missing '(' in function head\n");
        return LNULL;
        }
    POSITION(ctx)++;
    
    if (TYPE(token) == EXPRESSION_CLOSING_BRACKET)
        {
        POSITION(ctx)++;
        
        *number_of_parametrs = 0;

        return NO_FUNC_ARGUMENTS;
        }

    Token* first_parametr = ParametrInitialization(ctx);
    if (!first_parametr)  
        return LNULL;

    if (TYPE(token) == ASSIGMENT)
        {
        report_syntax_error("Assigment forbiden in function head!\n");
        return LNULL;
        }

    if (TYPE(token) != SEPARATOR && TYPE(token) != EXPRESSION_CLOSING_BRACKET)
        {
        report_syntax_error("No separator between arguments in function '%s'\n", STRING_ARR(ctx)[NAME_ID(token)]);
        return LNULL;
        }

    Token* root = token;
    
    TYPE(root) = PARAMETR;
    LEFT(root) = first_parametr;

    (*number_of_parametrs)++;

    Token* current_param = root;
    while (OP(token) != EXPRESSION_CLOSING_BRACKET)
        {
        POSITION(ctx)++;

        Token* parametr_init = ParametrInitialization(ctx); 

        if (!parametr_init)
            return LNULL;

        if (TYPE(token) != SEPARATOR && TYPE(token) != EXPRESSION_CLOSING_BRACKET)
            {
            report_syntax_error("No separator between arguments in function '%s'\n", STRING_ARR(ctx)[NAME_ID(token)]);
            return LNULL;
            }

        Token* param = token;

        TYPE(param) = PARAMETR;
        LEFT(param) = parametr_init;
        
        RIGHT(current_param) = param;
        current_param = RIGHT(current_param);  

        (*number_of_parametrs)++;   
        }

    POSITION(ctx)++;

    return root;
    }

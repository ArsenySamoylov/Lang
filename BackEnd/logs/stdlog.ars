Wed Dec 21 02:34:06 2022

main::
  {
  GetProgramFromStdAwp::
    {
    LOG CALLOC:     {0x619000000580} = calloc (1013, 1 = 1013) from GetSrcFile:31, at ../ATC/Buffer/my_buffer.cpp:31
    LOG CALLOC:     {0x623000000100} = calloc (114, 56 = 6384) from LexicalCtxCtor:17, at ../Common/LexicalCtx/LexicalCtx.cpp:17
    LOG CALLOC:     {0x619000000f80} = calloc (114, 8 = 912) from LexicalCtxCtor:23, at ../Common/LexicalCtx/LexicalCtx.cpp:23
    LOG CALLOC:     {0x603000000100} = calloc (1, 24 = 24) from LexicalCtxCtor:28, at ../Common/LexicalCtx/LexicalCtx.cpp:28
    BufferCtor::
      {

      BufferCtor:306 returned SUCCESS (return 0;)
      }

    GetTokenFromStd::
      {
      SetToken::
        {
        }

      	n: 3
      	BUF(ctx)->str: < { VAR { "dedperdes" } { -1 } } { ST { VAR { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
      GetTokenFromStd::
        {
        SetToken::
          {
          }

        	n: 4
        	BUF(ctx)->str: < { "dedperdes" } { -1 } } { ST { VAR { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
        GetTokenFromStd::
          {
          	word_buffer: <dedperdes>
          	n: 11
          	ctx->number_of_strings: 0
          	n: 11
          	BUF(ctx)->str: <} { -1 } } { ST { VAR { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
          GetTokenFromStd::
            {
            }

          }

        	"Got left": <Got left>
        	n: 4
        	BUF(ctx)->str: < { -1 } } { ST { VAR { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
        GetTokenFromStd::
          {
          	n: 3
          	BUF(ctx)->str: < } } { ST { VAR { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
          GetTokenFromStd::
            {
            }

          }

        	"Got right": <Got right>
        	n: 4
        	BUF(ctx)->str: < } { ST { VAR { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
        }

      	"Got left": <Got left>
      	n: 3
      	BUF(ctx)->str: < { ST { VAR { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
      GetTokenFromStd::
        {
        SetToken::
          {
          }

        	n: 3
        	BUF(ctx)->str: < { VAR { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
        GetTokenFromStd::
          {
          SetToken::
            {
            }

          	n: 4
          	BUF(ctx)->str: < { "hellov" } { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
          GetTokenFromStd::
            {
            	word_buffer: <hellov>
            	n: 8
            	ctx->number_of_strings: 1
            	n: 8
            	BUF(ctx)->str: <} { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
            GetTokenFromStd::
              {
              }

            }

          	"Got left": <Got left>
          	n: 4
          	BUF(ctx)->str: < { 0 } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
          GetTokenFromStd::
            {
            	n: 2
            	BUF(ctx)->str: < } } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
            GetTokenFromStd::
              {
              }

            }

          	"Got right": <Got right>
          	n: 4
          	BUF(ctx)->str: < } { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
          }

        	"Got left": <Got left>
        	n: 3
        	BUF(ctx)->str: < { ST { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
        GetTokenFromStd::
          {
          SetToken::
            {
            }

          	n: 3
          	BUF(ctx)->str: < { FUNC { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
          GetTokenFromStd::
            {
            SetToken::
              {
              }

            	n: 5
            	BUF(ctx)->str: < { "main" { PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
            GetTokenFromStd::
              {
              	word_buffer: <main>
              	n: 6
              	ctx->number_of_strings: 2
              	n: 6
              	BUF(ctx)->str: <{ PARAM { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              GetTokenFromStd::
                {
                SetToken::
                  {
                  }

                	n: 6
                	BUF(ctx)->str: < { VAR { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 4
                  	BUF(ctx)->str: < { "argc" } { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    	word_buffer: <argc>
                    	n: 6
                    	ctx->number_of_strings: 3
                    	n: 6
                    	BUF(ctx)->str: <} { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      }

                    }

                  	"Got left": <Got left>
                  	n: 4
                  	BUF(ctx)->str: < { NIL } } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    }

                  	"Got right": <Got right>
                  	n: 4
                  	BUF(ctx)->str: < } { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  }

                	"Got left": <Got left>
                	n: 6
                	BUF(ctx)->str: < { PARAM { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 6
                  	BUF(ctx)->str: < { VAR { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 4
                    	BUF(ctx)->str: < { "argv" } { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      	word_buffer: <argv>
                      	n: 6
                      	ctx->number_of_strings: 4
                      	n: 6
                      	BUF(ctx)->str: <} { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        }

                      }

                    	"Got left": <Got left>
                    	n: 4
                    	BUF(ctx)->str: < { NIL } } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      }

                    	"Got right": <Got right>
                    	n: 4
                    	BUF(ctx)->str: < } { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    }

                  	"Got left": <Got left>
                  	n: 6
                  	BUF(ctx)->str: < { NIL } } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    }

                  	"Got right": <Got right>
                  	n: 6
                  	BUF(ctx)->str: < } } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  }

                	"Got right": <Got right>
                	n: 6
                	BUF(ctx)->str: < } { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                }

              	"Got left": <Got left>
              	n: 6
              	BUF(ctx)->str: < { TYPE } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              GetTokenFromStd::
                {
                SetToken::
                  {
                  }

                	n: 5
                	BUF(ctx)->str: < } } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  }

                }

              	"Got right": <Got right>
              	n: 6
              	BUF(ctx)->str: < } { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              }

            	"Got left": <Got left>
            	n: 5
            	BUF(ctx)->str: < { ST { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
            GetTokenFromStd::
              {
              SetToken::
                {
                }

              	n: 3
              	BUF(ctx)->str: < { VAR { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              GetTokenFromStd::
                {
                SetToken::
                  {
                  }

                	n: 4
                	BUF(ctx)->str: < { "ded" } { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  	word_buffer: <ded>
                  	n: 5
                  	ctx->number_of_strings: 5
                  	n: 5
                  	BUF(ctx)->str: <} { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    }

                  }

                	"Got left": <Got left>
                	n: 4
                	BUF(ctx)->str: < { IS_GT { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 6
                  	BUF(ctx)->str: < { 5 } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    	n: 2
                    	BUF(ctx)->str: < } { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      }

                    }

                  	"Got left": <Got left>
                  	n: 6
                  	BUF(ctx)->str: < { 1 } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    	n: 2
                    	BUF(ctx)->str: < } } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      }

                    }

                  	"Got right": <Got right>
                  	n: 6
                  	BUF(ctx)->str: < } } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  }

                	"Got right": <Got right>
                	n: 4
                	BUF(ctx)->str: < } { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                }

              	"Got left": <Got left>
              	n: 3
              	BUF(ctx)->str: < { ST { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              GetTokenFromStd::
                {
                SetToken::
                  {
                  }

                	n: 3
                	BUF(ctx)->str: < { IN { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 3
                  	BUF(ctx)->str: < { PARAM { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 6
                    	BUF(ctx)->str: < { "ded" } { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      	word_buffer: <ded>
                      	n: 5
                      	n: 5
                      	BUF(ctx)->str: <} { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        }

                      }

                    	"Got left": <Got left>
                    	n: 6
                    	BUF(ctx)->str: < { NIL } } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      }

                    	"Got right": <Got right>
                    	n: 6
                    	BUF(ctx)->str: < } { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    }

                  	"Got left": <Got left>
                  	n: 3
                  	BUF(ctx)->str: < { NIL } } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    }

                  	"Got right": <Got right>
                  	n: 3
                  	BUF(ctx)->str: < } { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  }

                	"Got left": <Got left>
                	n: 3
                	BUF(ctx)->str: < { ST { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 3
                  	BUF(ctx)->str: < { OUT { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 4
                    	BUF(ctx)->str: < { PARAM { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      	n: 6
                      	BUF(ctx)->str: < { CALL { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        SetToken::
                          {
                          }

                        	n: 5
                        	BUF(ctx)->str: < { "fucktorial" { PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          	word_buffer: <fucktorial>
                          	n: 12
                          	ctx->number_of_strings: 6
                          	n: 12
                          	BUF(ctx)->str: <{ PARAM { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          GetTokenFromStd::
                            {
                            SetToken::
                              {
                              }

                            	n: 6
                            	BUF(ctx)->str: < { "ded" } { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            GetTokenFromStd::
                              {
                              	word_buffer: <ded>
                              	n: 5
                              	n: 5
                              	BUF(ctx)->str: <} { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              GetTokenFromStd::
                                {
                                }

                              }

                            	"Got left": <Got left>
                            	n: 6
                            	BUF(ctx)->str: < { NIL } } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            GetTokenFromStd::
                              {
                              SetToken::
                                {
                                }

                              }

                            	"Got right": <Got right>
                            	n: 6
                            	BUF(ctx)->str: < } { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            }

                          	"Got left": <Got left>
                          	n: 12
                          	BUF(ctx)->str: < { NIL } } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          GetTokenFromStd::
                            {
                            SetToken::
                              {
                              }

                            }

                          	"Got right": <Got right>
                          	n: 12
                          	BUF(ctx)->str: < } { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          }

                        	"Got left": <Got left>
                        	n: 5
                        	BUF(ctx)->str: < { NIL } } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          SetToken::
                            {
                            }

                          }

                        	"Got right": <Got right>
                        	n: 5
                        	BUF(ctx)->str: < } { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        }

                      	"Got left": <Got left>
                      	n: 6
                      	BUF(ctx)->str: < { NIL } } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        SetToken::
                          {
                          }

                        }

                      	"Got right": <Got right>
                      	n: 6
                      	BUF(ctx)->str: < } { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      }

                    	"Got left": <Got left>
                    	n: 4
                    	BUF(ctx)->str: < { NIL } } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      }

                    	"Got right": <Got right>
                    	n: 4
                    	BUF(ctx)->str: < } { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    }

                  	"Got left": <Got left>
                  	n: 3
                  	BUF(ctx)->str: < { ST { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 3
                    	BUF(ctx)->str: < { RET { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      	n: 4
                      	BUF(ctx)->str: < { 0 } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        	n: 2
                        	BUF(ctx)->str: < } { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          }

                        }

                      	"Got left": <Got left>
                      	n: 4
                      	BUF(ctx)->str: < { NIL } } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        SetToken::
                          {
                          }

                        }

                      	"Got right": <Got right>
                      	n: 4
                      	BUF(ctx)->str: < } { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      }

                    	"Got left": <Got left>
                    	n: 3
                    	BUF(ctx)->str: < { NIL } } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      }

                    	"Got right": <Got right>
                    	n: 3
                    	BUF(ctx)->str: < } } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    }

                  	"Got right": <Got right>
                  	n: 3
                  	BUF(ctx)->str: < } } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  }

                	"Got right": <Got right>
                	n: 3
                	BUF(ctx)->str: < } } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                }

              	"Got right": <Got right>
              	n: 3
              	BUF(ctx)->str: < } } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              }

            	"Got right": <Got right>
            	n: 5
            	BUF(ctx)->str: < } { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
            }

          	"Got left": <Got left>
          	n: 3
          	BUF(ctx)->str: < { ST { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
          GetTokenFromStd::
            {
            SetToken::
              {
              }

            	n: 3
            	BUF(ctx)->str: < { FUNC { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
            GetTokenFromStd::
              {
              SetToken::
                {
                }

              	n: 5
              	BUF(ctx)->str: < { "fucktorial" { PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              GetTokenFromStd::
                {
                	word_buffer: <fucktorial>
                	n: 12
                	n: 12
                	BUF(ctx)->str: <{ PARAM { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 6
                  	BUF(ctx)->str: < { VAR { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 4
                    	BUF(ctx)->str: < { "number" } { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      	word_buffer: <number>
                      	n: 8
                      	ctx->number_of_strings: 7
                      	n: 8
                      	BUF(ctx)->str: <} { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        }

                      }

                    	"Got left": <Got left>
                    	n: 4
                    	BUF(ctx)->str: < { NIL } } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      }

                    	"Got right": <Got right>
                    	n: 4
                    	BUF(ctx)->str: < } { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    }

                  	"Got left": <Got left>
                  	n: 6
                  	BUF(ctx)->str: < { NIL } } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    }

                  	"Got right": <Got right>
                  	n: 6
                  	BUF(ctx)->str: < } { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  }

                	"Got left": <Got left>
                	n: 12
                	BUF(ctx)->str: < { TYPE } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 5
                  	BUF(ctx)->str: < } } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    }

                  }

                	"Got right": <Got right>
                	n: 12
                	BUF(ctx)->str: < } { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                }

              	"Got left": <Got left>
              	n: 5
              	BUF(ctx)->str: < { ST { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              GetTokenFromStd::
                {
                SetToken::
                  {
                  }

                	n: 3
                	BUF(ctx)->str: < { IF { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 3
                  	BUF(ctx)->str: < { IS_GT { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 6
                    	BUF(ctx)->str: < { "number" } { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      	word_buffer: <number>
                      	n: 8
                      	n: 8
                      	BUF(ctx)->str: <} { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        }

                      }

                    	"Got left": <Got left>
                    	n: 6
                    	BUF(ctx)->str: < { 1 } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      	n: 2
                      	BUF(ctx)->str: < } } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        }

                      }

                    	"Got right": <Got right>
                    	n: 6
                    	BUF(ctx)->str: < } { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    }

                  	"Got left": <Got left>
                  	n: 3
                  	BUF(ctx)->str: < { ST { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 3
                    	BUF(ctx)->str: < { VAR { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      	n: 4
                      	BUF(ctx)->str: < { "temp" } { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        	word_buffer: <temp>
                        	n: 6
                        	ctx->number_of_strings: 8
                        	n: 6
                        	BUF(ctx)->str: <} { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          }

                        }

                      	"Got left": <Got left>
                      	n: 4
                      	BUF(ctx)->str: < { "number" } } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        	word_buffer: <number>
                        	n: 8
                        	n: 8
                        	BUF(ctx)->str: <} } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          }

                        }

                      	"Got right": <Got right>
                      	n: 4
                      	BUF(ctx)->str: < } { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      }

                    	"Got left": <Got left>
                    	n: 3
                    	BUF(ctx)->str: < { ST { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      	n: 3
                      	BUF(ctx)->str: < { OUT { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        SetToken::
                          {
                          }

                        	n: 4
                        	BUF(ctx)->str: < { PARAM { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          SetToken::
                            {
                            }

                          	n: 6
                          	BUF(ctx)->str: < { ADD { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          GetTokenFromStd::
                            {
                            SetToken::
                              {
                              }

                            	n: 4
                            	BUF(ctx)->str: < { IS_GT { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            GetTokenFromStd::
                              {
                              SetToken::
                                {
                                }

                              	n: 6
                              	BUF(ctx)->str: < { "number" } { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              GetTokenFromStd::
                                {
                                	word_buffer: <number>
                                	n: 8
                                	n: 8
                                	BUF(ctx)->str: <} { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                GetTokenFromStd::
                                  {
                                  }

                                }

                              	"Got left": <Got left>
                              	n: 6
                              	BUF(ctx)->str: < { 0 } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              GetTokenFromStd::
                                {
                                	n: 2
                                	BUF(ctx)->str: < } } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                GetTokenFromStd::
                                  {
                                  }

                                }

                              	"Got right": <Got right>
                              	n: 6
                              	BUF(ctx)->str: < } { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              }

                            	"Got left": <Got left>
                            	n: 4
                            	BUF(ctx)->str: < { IS_BT { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            GetTokenFromStd::
                              {
                              SetToken::
                                {
                                }

                              	n: 6
                              	BUF(ctx)->str: < { "number" } { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              GetTokenFromStd::
                                {
                                	word_buffer: <number>
                                	n: 8
                                	n: 8
                                	BUF(ctx)->str: <} { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                GetTokenFromStd::
                                  {
                                  }

                                }

                              	"Got left": <Got left>
                              	n: 6
                              	BUF(ctx)->str: < { 0 } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              GetTokenFromStd::
                                {
                                	n: 2
                                	BUF(ctx)->str: < } } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                GetTokenFromStd::
                                  {
                                  }

                                }

                              	"Got right": <Got right>
                              	n: 6
                              	BUF(ctx)->str: < } } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              }

                            	"Got right": <Got right>
                            	n: 4
                            	BUF(ctx)->str: < } { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            }

                          	"Got left": <Got left>
                          	n: 6
                          	BUF(ctx)->str: < { NIL } } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          GetTokenFromStd::
                            {
                            SetToken::
                              {
                              }

                            }

                          	"Got right": <Got right>
                          	n: 6
                          	BUF(ctx)->str: < } { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          }

                        	"Got left": <Got left>
                        	n: 4
                        	BUF(ctx)->str: < { NIL } } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          SetToken::
                            {
                            }

                          }

                        	"Got right": <Got right>
                        	n: 4
                        	BUF(ctx)->str: < } { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        }

                      	"Got left": <Got left>
                      	n: 3
                      	BUF(ctx)->str: < { ST { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        SetToken::
                          {
                          }

                        	n: 3
                        	BUF(ctx)->str: < { RET { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          SetToken::
                            {
                            }

                          	n: 4
                          	BUF(ctx)->str: < { MUL { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          GetTokenFromStd::
                            {
                            SetToken::
                              {
                              }

                            	n: 4
                            	BUF(ctx)->str: < { "temp" } { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            GetTokenFromStd::
                              {
                              	word_buffer: <temp>
                              	n: 6
                              	n: 6
                              	BUF(ctx)->str: <} { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              GetTokenFromStd::
                                {
                                }

                              }

                            	"Got left": <Got left>
                            	n: 4
                            	BUF(ctx)->str: < { CALL { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            GetTokenFromStd::
                              {
                              SetToken::
                                {
                                }

                              	n: 5
                              	BUF(ctx)->str: < { "fucktorial" { PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              GetTokenFromStd::
                                {
                                	word_buffer: <fucktorial>
                                	n: 12
                                	n: 12
                                	BUF(ctx)->str: <{ PARAM { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                GetTokenFromStd::
                                  {
                                  SetToken::
                                    {
                                    }

                                  	n: 6
                                  	BUF(ctx)->str: < { SUB { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                  GetTokenFromStd::
                                    {
                                    SetToken::
                                      {
                                      }

                                    	n: 4
                                    	BUF(ctx)->str: < { "number" } { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                    GetTokenFromStd::
                                      {
                                      	word_buffer: <number>
                                      	n: 8
                                      	n: 8
                                      	BUF(ctx)->str: <} { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                      GetTokenFromStd::
                                        {
                                        }

                                      }

                                    	"Got left": <Got left>
                                    	n: 4
                                    	BUF(ctx)->str: < { 1 } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                    GetTokenFromStd::
                                      {
                                      	n: 2
                                      	BUF(ctx)->str: < } } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                      GetTokenFromStd::
                                        {
                                        }

                                      }

                                    	"Got right": <Got right>
                                    	n: 4
                                    	BUF(ctx)->str: < } { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                    }

                                  	"Got left": <Got left>
                                  	n: 6
                                  	BUF(ctx)->str: < { NIL } } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                  GetTokenFromStd::
                                    {
                                    SetToken::
                                      {
                                      }

                                    }

                                  	"Got right": <Got right>
                                  	n: 6
                                  	BUF(ctx)->str: < } { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                  }

                                	"Got left": <Got left>
                                	n: 12
                                	BUF(ctx)->str: < { NIL } } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                GetTokenFromStd::
                                  {
                                  SetToken::
                                    {
                                    }

                                  }

                                	"Got right": <Got right>
                                	n: 12
                                	BUF(ctx)->str: < } { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                                }

                              	"Got left": <Got left>
                              	n: 5
                              	BUF(ctx)->str: < { NIL } } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              GetTokenFromStd::
                                {
                                SetToken::
                                  {
                                  }

                                }

                              	"Got right": <Got right>
                              	n: 5
                              	BUF(ctx)->str: < } } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                              }

                            	"Got right": <Got right>
                            	n: 4
                            	BUF(ctx)->str: < } { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                            }

                          	"Got left": <Got left>
                          	n: 4
                          	BUF(ctx)->str: < { NIL } } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          GetTokenFromStd::
                            {
                            SetToken::
                              {
                              }

                            }

                          	"Got right": <Got right>
                          	n: 4
                          	BUF(ctx)->str: < } { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          }

                        	"Got left": <Got left>
                        	n: 3
                        	BUF(ctx)->str: < { NIL } } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          SetToken::
                            {
                            }

                          }

                        	"Got right": <Got right>
                        	n: 3
                        	BUF(ctx)->str: < } } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        }

                      	"Got right": <Got right>
                      	n: 3
                      	BUF(ctx)->str: < } } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      }

                    	"Got right": <Got right>
                    	n: 3
                    	BUF(ctx)->str: < } } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    }

                  	"Got right": <Got right>
                  	n: 3
                  	BUF(ctx)->str: < } { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  }

                	"Got left": <Got left>
                	n: 3
                	BUF(ctx)->str: < { ST { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 3
                  	BUF(ctx)->str: < { RET { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 4
                    	BUF(ctx)->str: < { 1 } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      	n: 2
                      	BUF(ctx)->str: < } { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        }

                      }

                    	"Got left": <Got left>
                    	n: 4
                    	BUF(ctx)->str: < { NIL } } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      }

                    	"Got right": <Got right>
                    	n: 4
                    	BUF(ctx)->str: < } { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    }

                  	"Got left": <Got left>
                  	n: 3
                  	BUF(ctx)->str: < { NIL } } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    }

                  	"Got right": <Got right>
                  	n: 3
                  	BUF(ctx)->str: < } } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  }

                	"Got right": <Got right>
                	n: 3
                	BUF(ctx)->str: < } } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                }

              	"Got right": <Got right>
              	n: 5
              	BUF(ctx)->str: < } { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              }

            	"Got left": <Got left>
            	n: 3
            	BUF(ctx)->str: < { ST { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
            GetTokenFromStd::
              {
              SetToken::
                {
                }

              	n: 3
              	BUF(ctx)->str: < { VAR { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
              GetTokenFromStd::
                {
                SetToken::
                  {
                  }

                	n: 4
                	BUF(ctx)->str: < { "uselles" } { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  	word_buffer: <uselles>
                  	n: 9
                  	ctx->number_of_strings: 9
                  	n: 9
                  	BUF(ctx)->str: <} { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    }

                  }

                	"Got left": <Got left>
                	n: 4
                	BUF(ctx)->str: < { MUL { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                GetTokenFromStd::
                  {
                  SetToken::
                    {
                    }

                  	n: 4
                  	BUF(ctx)->str: < { 84 } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    	n: 3
                    	BUF(ctx)->str: < } { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      }

                    }

                  	"Got left": <Got left>
                  	n: 4
                  	BUF(ctx)->str: < { CALL { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                  GetTokenFromStd::
                    {
                    SetToken::
                      {
                      }

                    	n: 5
                    	BUF(ctx)->str: < { "fucktorial" { PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      	word_buffer: <fucktorial>
                      	n: 12
                      	n: 12
                      	BUF(ctx)->str: <{ PARAM { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        SetToken::
                          {
                          }

                        	n: 6
                        	BUF(ctx)->str: < { "hellov" } { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          	word_buffer: <hellov>
                          	n: 8
                          	n: 8
                          	BUF(ctx)->str: <} { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                          GetTokenFromStd::
                            {
                            }

                          }

                        	"Got left": <Got left>
                        	n: 6
                        	BUF(ctx)->str: < { NIL } } { NIL } } { NIL } } } } { NIL } } } } } } >
                        GetTokenFromStd::
                          {
                          SetToken::
                            {
                            }

                          }

                        	"Got right": <Got right>
                        	n: 6
                        	BUF(ctx)->str: < } { NIL } } { NIL } } } } { NIL } } } } } } >
                        }

                      	"Got left": <Got left>
                      	n: 12
                      	BUF(ctx)->str: < { NIL } } { NIL } } } } { NIL } } } } } } >
                      GetTokenFromStd::
                        {
                        SetToken::
                          {
                          }

                        }

                      	"Got right": <Got right>
                      	n: 12
                      	BUF(ctx)->str: < } { NIL } } } } { NIL } } } } } } >
                      }

                    	"Got left": <Got left>
                    	n: 5
                    	BUF(ctx)->str: < { NIL } } } } { NIL } } } } } } >
                    GetTokenFromStd::
                      {
                      SetToken::
                        {
                        }

                      }

                    	"Got right": <Got right>
                    	n: 5
                    	BUF(ctx)->str: < } } } { NIL } } } } } } >
                    }

                  	"Got right": <Got right>
                  	n: 4
                  	BUF(ctx)->str: < } } { NIL } } } } } } >
                  }

                	"Got right": <Got right>
                	n: 4
                	BUF(ctx)->str: < } { NIL } } } } } } >
                }

              	"Got left": <Got left>
              	n: 3
              	BUF(ctx)->str: < { NIL } } } } } } >
              GetTokenFromStd::
                {
                SetToken::
                  {
                  }

                }

              	"Got right": <Got right>
              	n: 3
              	BUF(ctx)->str: < } } } } } >
              }

            	"Got right": <Got right>
            	n: 3
            	BUF(ctx)->str: < } } } } >
            }

          	"Got right": <Got right>
          	n: 3
          	BUF(ctx)->str: < } } } >
          }

        	"Got right": <Got right>
        	n: 3
        	BUF(ctx)->str: < } } >
        }

      	"Got right": <Got right>
      	n: 3
      	BUF(ctx)->str: < } >
      }

    LOG FREE(kill): {0x603000000100} - will be freed from GetProgramFromStdAwp:144, at ../Common/StandartAWP/GetStd.cpp:144
    LOG FREE(kill): {0x619000000a80} - will be freed from GetProgramFromStdAwp:145, at ../Common/StandartAWP/GetStd.cpp:145
    }

  MakeImg::
    {
    PrintNode::
      {
      Token node
      (0x623000000100)::::::::::::::::
      		  left_child: 0x623000000138
      		 right_child: 0x6230000001e0
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000138)::::::::::::::::
      		  left_child: 0x623000000170
      		 right_child: 0x6230000001a8
      		        type: INITIALIZATOR | {'var'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000170)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'dedperdes'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000001a8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'-1'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000001e0)::::::::::::::::
      		  left_child: 0x623000000218
      		 right_child: 0x6230000002c0
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000218)::::::::::::::::
      		  left_child: 0x623000000250
      		 right_child: 0x623000000288
      		        type: INITIALIZATOR | {'var'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000250)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'hellov'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000288)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'0'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000002c0)::::::::::::::::
      		  left_child: 0x6230000002f8
      		 right_child: 0x623000000950
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000002f8)::::::::::::::::
      		  left_child: 0x623000000330
      		 right_child: 0x6230000004f0
      		        type: FUNCTION | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000330)::::::::::::::::
      		  left_child: 0x623000000368
      		 right_child: 0x6230000004b8
      		        type: NAME | {'main'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000368)::::::::::::::::
      		  left_child: 0x6230000003a0
      		 right_child: 0x623000000410
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000003a0)::::::::::::::::
      		  left_child: 0x6230000003d8
      		 right_child: (nil)
      		        type: INITIALIZATOR | {'var'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000003d8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'argc'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000410)::::::::::::::::
      		  left_child: 0x623000000448
      		 right_child: (nil)
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000448)::::::::::::::::
      		  left_child: 0x623000000480
      		 right_child: (nil)
      		        type: INITIALIZATOR | {'var'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000480)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'argv'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000004b8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: FUNCTION_RET_TYPE | {'double'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000004f0)::::::::::::::::
      		  left_child: 0x623000000528
      		 right_child: 0x623000000640
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000528)::::::::::::::::
      		  left_child: 0x623000000560
      		 right_child: 0x623000000598
      		        type: INITIALIZATOR | {'var'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000560)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'ded'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000598)::::::::::::::::
      		  left_child: 0x6230000005d0
      		 right_child: 0x623000000608
      		        type: OPERATOR | {'B'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000005d0)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'5'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000608)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'1'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000640)::::::::::::::::
      		  left_child: 0x623000000678
      		 right_child: 0x623000000720
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000678)::::::::::::::::
      		  left_child: 0x6230000006b0
      		 right_child: (nil)
      		        type: NATIVE_FUNCTION | {'fin'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000006b0)::::::::::::::::
      		  left_child: 0x6230000006e8
      		 right_child: (nil)
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000006e8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'ded'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000720)::::::::::::::::
      		  left_child: 0x623000000758
      		 right_child: 0x6230000008a8
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000758)::::::::::::::::
      		  left_child: 0x623000000790
      		 right_child: (nil)
      		        type: NATIVE_FUNCTION | {'fout'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000790)::::::::::::::::
      		  left_child: 0x6230000007c8
      		 right_child: (nil)
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000007c8)::::::::::::::::
      		  left_child: 0x623000000800
      		 right_child: (nil)
      		        type: CALL | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000800)::::::::::::::::
      		  left_child: 0x623000000838
      		 right_child: (nil)
      		        type: NAME | {'fucktorial'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000838)::::::::::::::::
      		  left_child: 0x623000000870
      		 right_child: (nil)
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000870)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'ded'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000008a8)::::::::::::::::
      		  left_child: 0x6230000008e0
      		 right_child: (nil)
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000008e0)::::::::::::::::
      		  left_child: 0x623000000918
      		 right_child: (nil)
      		        type: FUNCTION_RET_TYPE | {'double'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000918)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'0'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000950)::::::::::::::::
      		  left_child: 0x623000000988
      		 right_child: 0x6230000011d8
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000988)::::::::::::::::
      		  left_child: 0x6230000009c0
      		 right_child: 0x623000000ad8
      		        type: FUNCTION | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000009c0)::::::::::::::::
      		  left_child: 0x6230000009f8
      		 right_child: 0x623000000aa0
      		        type: NAME | {'fucktorial'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000009f8)::::::::::::::::
      		  left_child: 0x623000000a30
      		 right_child: (nil)
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000a30)::::::::::::::::
      		  left_child: 0x623000000a68
      		 right_child: (nil)
      		        type: INITIALIZATOR | {'var'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000a68)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'number'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000aa0)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: FUNCTION_RET_TYPE | {'double'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000ad8)::::::::::::::::
      		  left_child: 0x623000000b10
      		 right_child: 0x623000001130
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000b10)::::::::::::::::
      		  left_child: 0x623000000b48
      		 right_child: 0x623000000bf0
      		        type: INSTRUCTION | {'if'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000b48)::::::::::::::::
      		  left_child: 0x623000000b80
      		 right_child: 0x623000000bb8
      		        type: OPERATOR | {'B'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000b80)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'number'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000bb8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'1'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000bf0)::::::::::::::::
      		  left_child: 0x623000000c28
      		 right_child: 0x623000000cd0
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000c28)::::::::::::::::
      		  left_child: 0x623000000c60
      		 right_child: 0x623000000c98
      		        type: INITIALIZATOR | {'var'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000c60)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'temp'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000c98)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'number'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000cd0)::::::::::::::::
      		  left_child: 0x623000000d08
      		 right_child: 0x623000000f00
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000d08)::::::::::::::::
      		  left_child: 0x623000000d40
      		 right_child: (nil)
      		        type: NATIVE_FUNCTION | {'fout'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000d40)::::::::::::::::
      		  left_child: 0x623000000d78
      		 right_child: (nil)
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000d78)::::::::::::::::
      		  left_child: 0x623000000db0
      		 right_child: 0x623000000e58
      		        type: OPERATOR | {'+'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000db0)::::::::::::::::
      		  left_child: 0x623000000de8
      		 right_child: 0x623000000e20
      		        type: OPERATOR | {'B'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000de8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'number'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000e20)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'0'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000e58)::::::::::::::::
      		  left_child: 0x623000000e90
      		 right_child: 0x623000000ec8
      		        type: OPERATOR | {'L'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000e90)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'number'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000ec8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'0'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000f00)::::::::::::::::
      		  left_child: 0x623000000f38
      		 right_child: (nil)
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000f38)::::::::::::::::
      		  left_child: 0x623000000f70
      		 right_child: (nil)
      		        type: FUNCTION_RET_TYPE | {'double'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000f70)::::::::::::::::
      		  left_child: 0x623000000fa8
      		 right_child: 0x623000000fe0
      		        type: OPERATOR | {'*'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000fa8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'temp'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000000fe0)::::::::::::::::
      		  left_child: 0x623000001018
      		 right_child: (nil)
      		        type: CALL | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001018)::::::::::::::::
      		  left_child: 0x623000001050
      		 right_child: (nil)
      		        type: NAME | {'fucktorial'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001050)::::::::::::::::
      		  left_child: 0x623000001088
      		 right_child: (nil)
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001088)::::::::::::::::
      		  left_child: 0x6230000010c0
      		 right_child: 0x6230000010f8
      		        type: OPERATOR | {'-'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000010c0)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'number'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000010f8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'1'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001130)::::::::::::::::
      		  left_child: 0x623000001168
      		 right_child: (nil)
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001168)::::::::::::::::
      		  left_child: 0x6230000011a0
      		 right_child: (nil)
      		        type: FUNCTION_RET_TYPE | {'double'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000011a0)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'1'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000011d8)::::::::::::::::
      		  left_child: 0x623000001210
      		 right_child: (nil)
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001210)::::::::::::::::
      		  left_child: 0x623000001248
      		 right_child: 0x623000001280
      		        type: INITIALIZATOR | {'var'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001248)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'uselles'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001280)::::::::::::::::
      		  left_child: 0x6230000012b8
      		 right_child: 0x6230000012f0
      		        type: OPERATOR | {'*'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000012b8)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: CONSTANT | {'84'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x6230000012f0)::::::::::::::::
      		  left_child: 0x623000001328
      		 right_child: (nil)
      		        type: CALL | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001328)::::::::::::::::
      		  left_child: 0x623000001360
      		 right_child: (nil)
      		        type: NAME | {'fucktorial'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001360)::::::::::::::::
      		  left_child: 0x623000001398
      		 right_child: (nil)
      		        type: PARAMETR | {'$'}
      			  Line: 0
      			Indent: 0
      
      }

    PrintNode::
      {
      Token node
      (0x623000001398)::::::::::::::::
      		  left_child: (nil)
      		 right_child: (nil)
      		        type: NAME | {'hellov'}
      			  Line: 0
      			Indent: 0
      
      }

    }

  LOG CALLOC:     {0x606000000020} = calloc (1, 56 = 56) from CtxCtor:235, at ./src/SetTokenTree.cpp:235
  LOG CALLOC:     {0x602000000170} = calloc (1, 16 = 16) from NewNameTableArr:209, at ../Common/Structures/Tabels/NameTable.cpp:209
  LOG CALLOC:     {0x604000000010} = calloc (5, 8 = 40) from NewNameTableArr:215, at ../Common/Structures/Tabels/NameTable.cpp:215
  AddTable::
    {
    LOG CALLOC:     {0x603000000130} = calloc (1, 24 = 24) from NewNameTable:18, at ../Common/Structures/Tabels/NameTable.cpp:18
    LOG CALLOC:     {0x607000000100} = calloc (10, 8 = 80) from NewNameTable:24, at ../Common/Structures/Tabels/NameTable.cpp:24
    }

  AddTable::
    {
    LOG CALLOC:     {0x603000000160} = calloc (1, 24 = 24) from NewNameTable:18, at ../Common/Structures/Tabels/NameTable.cpp:18
    LOG CALLOC:     {0x607000000170} = calloc (10, 8 = 80) from NewNameTable:24, at ../Common/Structures/Tabels/NameTable.cpp:24
    }

  SetToken::
    {
    SetToken::
      {
      	&var_label: 0x7ffceb056b60
      	NAME_ID(var_name): 0
      	var_name: 0x623000000170
      	STRING_ARR(ctx): 0x619000000f80
      CopyLabel::
        {
        IsLabel::
          {
          }

        LOG CALLOC:     {0x603000000190} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
        AddLabel::
          {
          }

        }

      SetToken::
        {
        IsLabel::
          {
          	type: 7
          	name_id: 0
          }

        SetToken::
          {
          }

        SetToken::
          {
          }

        }

      SetToken::
        {
        SetToken::
          {
          }

        SetToken::
          {
          }

        }

      }

    SetToken::
      {
      SetToken::
        {
        	&var_label: 0x7ffceb0569f0
        	NAME_ID(var_name): 1
        	var_name: 0x623000000250
        	STRING_ARR(ctx): 0x619000000f80
        CopyLabel::
          {
          IsLabel::
            {
            	type: 7
            	name_id: 1
            }

          LOG CALLOC:     {0x6030000001c0} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
          AddLabel::
            {
            }

          }

        SetToken::
          {
          IsLabel::
            {
            	type: 7
            	name_id: 1
            }

          SetToken::
            {
            }

          SetToken::
            {
            }

          }

        SetToken::
          {
          SetToken::
            {
            }

          SetToken::
            {
            }

          }

        }

      SetToken::
        {
        SetToken::
          {
          AddTable::
            {
            LOG CALLOC:     {0x6030000001f0} = calloc (1, 24 = 24) from NewNameTable:18, at ../Common/Structures/Tabels/NameTable.cpp:18
            LOG CALLOC:     {0x6070000001e0} = calloc (10, 8 = 80) from NewNameTable:24, at ../Common/Structures/Tabels/NameTable.cpp:24
            }

          SetToken::
            {
            SetToken::
              {
              	&var_label: 0x7ffceb0565a0
              	NAME_ID(var_name): 3
              	var_name: 0x6230000003d8
              	STRING_ARR(ctx): 0x619000000f80
              CopyLabel::
                {
                IsLabel::
                  {
                  }

                LOG CALLOC:     {0x603000000220} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
                AddLabel::
                  {
                  }

                }

              SetToken::
                {
                IsLabel::
                  {
                  	type: 7
                  	name_id: 3
                  }

                SetToken::
                  {
                  }

                SetToken::
                  {
                  }

                }

              SetToken::
                {
                }

              }

            SetToken::
              {
              SetToken::
                {
                	&var_label: 0x7ffceb056430
                	NAME_ID(var_name): 4
                	var_name: 0x623000000480
                	STRING_ARR(ctx): 0x619000000f80
                CopyLabel::
                  {
                  IsLabel::
                    {
                    	type: 7
                    	name_id: 4
                    }

                  LOG CALLOC:     {0x603000000250} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
                  AddLabel::
                    {
                    }

                  }

                SetToken::
                  {
                  IsLabel::
                    {
                    	type: 7
                    	name_id: 4
                    }

                  SetToken::
                    {
                    }

                  SetToken::
                    {
                    }

                  }

                SetToken::
                  {
                  }

                }

              SetToken::
                {
                }

              }

            }

          SetToken::
            {
            SetToken::
              {
              	&var_label: 0x7ffceb0565a0
              	NAME_ID(var_name): 5
              	var_name: 0x623000000560
              	STRING_ARR(ctx): 0x619000000f80
              CopyLabel::
                {
                IsLabel::
                  {
                  	type: 7
                  	name_id: 5
                  }

                LOG CALLOC:     {0x603000000280} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
                AddLabel::
                  {
                  }

                }

              SetToken::
                {
                IsLabel::
                  {
                  	type: 7
                  	name_id: 5
                  }

                SetToken::
                  {
                  }

                SetToken::
                  {
                  }

                }

              SetToken::
                {
                SetToken::
                  {
                  SetToken::
                    {
                    }

                  SetToken::
                    {
                    }

                  }

                SetToken::
                  {
                  SetToken::
                    {
                    }

                  SetToken::
                    {
                    }

                  }

                }

              }

            SetToken::
              {
              SetToken::
                {
                SetToken::
                  {
                  SetToken::
                    {
                    IsLabel::
                      {
                      	type: 7
                      	name_id: 5
                      }

                    SetToken::
                      {
                      }

                    SetToken::
                      {
                      }

                    }

                  SetToken::
                    {
                    }

                  }

                SetToken::
                  {
                  }

                }

              SetToken::
                {
                SetToken::
                  {
                  SetToken::
                    {
                    SetToken::
                      {
                      IsLabel::
                        {
                        	type: 9
                        	name_id: 6
                        }

                      SetToken::
                        {
                        SetToken::
                          {
                          IsLabel::
                            {
                            	type: 7
                            	name_id: 5
                            }

                          SetToken::
                            {
                            }

                          SetToken::
                            {
                            }

                          }

                        SetToken::
                          {
                          }

                        }

                      }

                    SetToken::
                      {
                      }

                    }

                  SetToken::
                    {
                    }

                  }

                SetToken::
                  {
                  SetToken::
                    {
                    SetToken::
                      {
                      SetToken::
                        {
                        }

                      SetToken::
                        {
                        }

                      }

                    SetToken::
                      {
                      }

                    }

                  SetToken::
                    {
                    }

                  }

                }

              }

            }

          CopyLabel::
            {
            IsLabel::
              {
              	type: 9
              	name_id: 2
              }

            LOG CALLOC:     {0x6030000002b0} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
            AddLabel::
              {
              }

            }

          }

        SetToken::
          {
          SetToken::
            {
            AddTable::
              {
              LOG CALLOC:     {0x6030000002e0} = calloc (1, 24 = 24) from NewNameTable:18, at ../Common/Structures/Tabels/NameTable.cpp:18
              LOG CALLOC:     {0x607000000250} = calloc (10, 8 = 80) from NewNameTable:24, at ../Common/Structures/Tabels/NameTable.cpp:24
              }

            SetToken::
              {
              SetToken::
                {
                	&var_label: 0x7ffceb056430
                	NAME_ID(var_name): 7
                	var_name: 0x623000000a68
                	STRING_ARR(ctx): 0x619000000f80
                CopyLabel::
                  {
                  IsLabel::
                    {
                    }

                  LOG CALLOC:     {0x603000000310} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
                  AddLabel::
                    {
                    }

                  }

                SetToken::
                  {
                  IsLabel::
                    {
                    	type: 7
                    	name_id: 7
                    }

                  SetToken::
                    {
                    }

                  SetToken::
                    {
                    }

                  }

                SetToken::
                  {
                  }

                }

              SetToken::
                {
                }

              }

            SetToken::
              {
              SetToken::
                {
                SetToken::
                  {
                  SetToken::
                    {
                    IsLabel::
                      {
                      	type: 7
                      	name_id: 7
                      }

                    SetToken::
                      {
                      }

                    SetToken::
                      {
                      }

                    }

                  SetToken::
                    {
                    SetToken::
                      {
                      }

                    SetToken::
                      {
                      }

                    }

                  }

                SetToken::
                  {
                  SetToken::
                    {
                    	&var_label: 0x7ffceb056150
                    	NAME_ID(var_name): 8
                    	var_name: 0x623000000c60
                    	STRING_ARR(ctx): 0x619000000f80
                    CopyLabel::
                      {
                      IsLabel::
                        {
                        	type: 7
                        	name_id: 8
                        }

                      LOG CALLOC:     {0x603000000340} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
                      AddLabel::
                        {
                        }

                      }

                    SetToken::
                      {
                      IsLabel::
                        {
                        	type: 7
                        	name_id: 8
                        }

                      SetToken::
                        {
                        }

                      SetToken::
                        {
                        }

                      }

                    SetToken::
                      {
                      IsLabel::
                        {
                        	type: 7
                        	name_id: 7
                        }

                      SetToken::
                        {
                        }

                      SetToken::
                        {
                        }

                      }

                    }

                  SetToken::
                    {
                    SetToken::
                      {
                      SetToken::
                        {
                        SetToken::
                          {
                          SetToken::
                            {
                            SetToken::
                              {
                              IsLabel::
                                {
                                	type: 7
                                	name_id: 7
                                }

                              SetToken::
                                {
                                }

                              SetToken::
                                {
                                }

                              }

                            SetToken::
                              {
                              SetToken::
                                {
                                }

                              SetToken::
                                {
                                }

                              }

                            }

                          SetToken::
                            {
                            SetToken::
                              {
                              IsLabel::
                                {
                                	type: 7
                                	name_id: 7
                                }

                              SetToken::
                                {
                                }

                              SetToken::
                                {
                                }

                              }

                            SetToken::
                              {
                              SetToken::
                                {
                                }

                              SetToken::
                                {
                                }

                              }

                            }

                          }

                        SetToken::
                          {
                          }

                        }

                      SetToken::
                        {
                        }

                      }

                    SetToken::
                      {
                      SetToken::
                        {
                        SetToken::
                          {
                          SetToken::
                            {
                            IsLabel::
                              {
                              	type: 7
                              	name_id: 8
                              }

                            SetToken::
                              {
                              }

                            SetToken::
                              {
                              }

                            }

                          SetToken::
                            {
                            IsLabel::
                              {
                              	type: 9
                              	name_id: 6
                              }

                            SetToken::
                              {
                              SetToken::
                                {
                                SetToken::
                                  {
                                  IsLabel::
                                    {
                                    	type: 7
                                    	name_id: 7
                                    }

                                  SetToken::
                                    {
                                    }

                                  SetToken::
                                    {
                                    }

                                  }

                                SetToken::
                                  {
                                  SetToken::
                                    {
                                    }

                                  SetToken::
                                    {
                                    }

                                  }

                                }

                              SetToken::
                                {
                                }

                              }

                            }

                          }

                        SetToken::
                          {
                          }

                        }

                      SetToken::
                        {
                        }

                      }

                    }

                  }

                }

              SetToken::
                {
                SetToken::
                  {
                  SetToken::
                    {
                    SetToken::
                      {
                      }

                    SetToken::
                      {
                      }

                    }

                  SetToken::
                    {
                    }

                  }

                SetToken::
                  {
                  }

                }

              }

            CopyLabel::
              {
              IsLabel::
                {
                	type: 9
                	name_id: 6
                }

              LOG CALLOC:     {0x603000000370} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
              AddLabel::
                {
                }

              }

            }

          SetToken::
            {
            SetToken::
              {
              	&var_label: 0x7ffceb0565a0
              	NAME_ID(var_name): 9
              	var_name: 0x623000001248
              	STRING_ARR(ctx): 0x619000000f80
              CopyLabel::
                {
                IsLabel::
                  {
                  	type: 7
                  	name_id: 9
                  }

                LOG CALLOC:     {0x6030000003a0} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
                AddLabel::
                  {
                  }

                }

              SetToken::
                {
                IsLabel::
                  {
                  	type: 7
                  	name_id: 9
                  }

                SetToken::
                  {
                  }

                SetToken::
                  {
                  }

                }

              SetToken::
                {
                SetToken::
                  {
                  SetToken::
                    {
                    }

                  SetToken::
                    {
                    }

                  }

                SetToken::
                  {
                  IsLabel::
                    {
                    	type: 9
                    	name_id: 6
                    }

                  SetToken::
                    {
                    SetToken::
                      {
                      IsLabel::
                        {
                        	type: 7
                        	name_id: 1
                        }

                      SetToken::
                        {
                        }

                      SetToken::
                        {
                        }

                      }

                    SetToken::
                      {
                      }

                    }

                  }

                }

              }

            SetToken::
              {
              }

            }

          }

        }

      }

    }

  LOG FREE(kill): {0x606000000020} - will be freed from CtxDtor:284, at ./src/SetTokenTree.cpp:284
  TranslateToAsm::
    {

    OpenAsmFile:212 returned SUCCESS (return 0;)
    LOG CALLOC:     {0x6030000003d0} = calloc (1, 24 = 24) from NewNameTable:18, at ../Common/Structures/Tabels/NameTable.cpp:18
    LOG CALLOC:     {0x6070000002c0} = calloc (10, 8 = 80) from NewNameTable:24, at ../Common/Structures/Tabels/NameTable.cpp:24
    AddToAsm::
      {
      Token token
      (0x623000000100)::::::::::::::::
      		  left_child: 0x623000000138
      		 right_child: 0x6230000001e0
      		        type: STATEMENT | {'$'}
      			  Line: 0
      			Indent: 0
      
      AddToAsm::
        {
        Token token
        (0x623000000138)::::::::::::::::
        		  left_child: 0x623000000170
        		 right_child: 0x6230000001a8
        		        type: INITIALIZATOR | {'var'}
        			  Line: 0
        			Indent: 0
        
        VarInitialization::
          {
          Token token
          (0x623000000138)::::::::::::::::
          		  left_child: 0x623000000170
          		 right_child: 0x6230000001a8
          		        type: INITIALIZATOR | {'var'}
          			  Line: 0
          			Indent: 0
          
          CopyLabel::
            {
            IsLabel::
              {
              }

            LOG CALLOC:     {0x603000000400} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
            AddLabel::
              {
              }

            }

          }

        }

      AddToAsm::
        {
        Token token
        (0x6230000001e0)::::::::::::::::
        		  left_child: 0x623000000218
        		 right_child: 0x6230000002c0
        		        type: STATEMENT | {'$'}
        			  Line: 0
        			Indent: 0
        
        AddToAsm::
          {
          Token token
          (0x623000000218)::::::::::::::::
          		  left_child: 0x623000000250
          		 right_child: 0x623000000288
          		        type: INITIALIZATOR | {'var'}
          			  Line: 0
          			Indent: 0
          
          VarInitialization::
            {
            Token token
            (0x623000000218)::::::::::::::::
            		  left_child: 0x623000000250
            		 right_child: 0x623000000288
            		        type: INITIALIZATOR | {'var'}
            			  Line: 0
            			Indent: 0
            
            CopyLabel::
              {
              IsLabel::
                {
                	type: 7
                	name_id: 1
                }

              LOG CALLOC:     {0x603000000430} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
              AddLabel::
                {
                }

              }

            }

          }

        AddToAsm::
          {
          Token token
          (0x6230000002c0)::::::::::::::::
          		  left_child: 0x6230000002f8
          		 right_child: 0x623000000950
          		        type: STATEMENT | {'$'}
          			  Line: 0
          			Indent: 0
          
          AddToAsm::
            {
            Token token
            (0x6230000002f8)::::::::::::::::
            		  left_child: 0x623000000330
            		 right_child: 0x6230000004f0
            		        type: FUNCTION | {''}
            			  Line: 0
            			Indent: 0
            
            FunctionHandler::
              {
              Token token
              (0x6230000002f8)::::::::::::::::
              		  left_child: 0x623000000330
              		 right_child: 0x6230000004f0
              		        type: FUNCTION | {''}
              			  Line: 0
              			Indent: 0
              
              AddToAsm::
                {
                Token token
                (0x623000000368)::::::::::::::::
                		  left_child: 0x6230000003a0
                		 right_child: 0x623000000410
                		        type: PARAMETR | {'$'}
                			  Line: 0
                			Indent: 0
                
                ParametrHandler::
                  {
                  Token token
                  (0x623000000368)::::::::::::::::
                  		  left_child: 0x6230000003a0
                  		 right_child: 0x623000000410
                  		        type: PARAMETR | {'$'}
                  			  Line: 0
                  			Indent: 0
                  
                  ParametrHandler::
                    {
                    Token token
                    (0x623000000410)::::::::::::::::
                    		  left_child: 0x623000000448
                    		 right_child: (nil)
                    		        type: PARAMETR | {'$'}
                    			  Line: 0
                    			Indent: 0
                    
                    }

                  }

                }

              AddToAsm::
                {
                Token token
                (0x6230000004f0)::::::::::::::::
                		  left_child: 0x623000000528
                		 right_child: 0x623000000640
                		        type: STATEMENT | {'$'}
                			  Line: 0
                			Indent: 0
                
                AddToAsm::
                  {
                  Token token
                  (0x623000000528)::::::::::::::::
                  		  left_child: 0x623000000560
                  		 right_child: 0x623000000598
                  		        type: INITIALIZATOR | {'var'}
                  			  Line: 0
                  			Indent: 0
                  
                  VarInitialization::
                    {
                    Token token
                    (0x623000000528)::::::::::::::::
                    		  left_child: 0x623000000560
                    		 right_child: 0x623000000598
                    		        type: INITIALIZATOR | {'var'}
                    			  Line: 0
                    			Indent: 0
                    
                    AssigmentHandler::
                      {
                      Token token
                      (0x623000000528)::::::::::::::::
                      		  left_child: 0x623000000560
                      		 right_child: 0x623000000598
                      		        type: INITIALIZATOR | {'var'}
                      			  Line: 0
                      			Indent: 0
                      
                      ExpressionHandler::
                        {
                        Token token
                        (0x623000000598)::::::::::::::::
                        		  left_child: 0x6230000005d0
                        		 right_child: 0x623000000608
                        		        type: OPERATOR | {'B'}
                        			  Line: 0
                        			Indent: 0
                        
                        MathOperationsHandler::
                          {
                          Token token
                          (0x623000000598)::::::::::::::::
                          		  left_child: 0x6230000005d0
                          		 right_child: 0x623000000608
                          		        type: OPERATOR | {'B'}
                          			  Line: 0
                          			Indent: 0
                          
                          ExpressionHandler::
                            {
                            Token token
                            (0x623000000608)::::::::::::::::
                            		  left_child: (nil)
                            		 right_child: (nil)
                            		        type: CONSTANT | {'1'}
                            			  Line: 0
                            			Indent: 0
                            
                            ConstantHandler::
                              {
                              Token token
                              (0x623000000608)::::::::::::::::
                              		  left_child: (nil)
                              		 right_child: (nil)
                              		        type: CONSTANT | {'1'}
                              			  Line: 0
                              			Indent: 0
                              
                              }

                            }

                          ExpressionHandler::
                            {
                            Token token
                            (0x6230000005d0)::::::::::::::::
                            		  left_child: (nil)
                            		 right_child: (nil)
                            		        type: CONSTANT | {'5'}
                            			  Line: 0
                            			Indent: 0
                            
                            ConstantHandler::
                              {
                              Token token
                              (0x6230000005d0)::::::::::::::::
                              		  left_child: (nil)
                              		 right_child: (nil)
                              		        type: CONSTANT | {'5'}
                              			  Line: 0
                              			Indent: 0
                              
                              }

                            }

                          }

                        }

                      NameHandler::
                        {
                        Token token
                        (0x623000000560)::::::::::::::::
                        		  left_child: (nil)
                        		 right_child: (nil)
                        		        type: NAME | {'ded'}
                        			  Line: 0
                        			Indent: 0
                        
                        }

                      }

                    }

                  }

                AddToAsm::
                  {
                  Token token
                  (0x623000000640)::::::::::::::::
                  		  left_child: 0x623000000678
                  		 right_child: 0x623000000720
                  		        type: STATEMENT | {'$'}
                  			  Line: 0
                  			Indent: 0
                  
                  AddToAsm::
                    {
                    Token token
                    (0x623000000678)::::::::::::::::
                    		  left_child: 0x6230000006b0
                    		 right_child: (nil)
                    		        type: NATIVE_FUNCTION | {'fin'}
                    			  Line: 0
                    			Indent: 0
                    
                    NativeFunctionHandler::
                      {
                      Token token
                      (0x623000000678)::::::::::::::::
                      		  left_child: 0x6230000006b0
                      		 right_child: (nil)
                      		        type: NATIVE_FUNCTION | {'fin'}
                      			  Line: 0
                      			Indent: 0
                      
                      NameHandler::
                        {
                        Token token
                        (0x6230000006e8)::::::::::::::::
                        		  left_child: (nil)
                        		 right_child: (nil)
                        		        type: NAME | {'ded'}
                        			  Line: 0
                        			Indent: 0
                        
                        }

                      }

                    }

                  AddToAsm::
                    {
                    Token token
                    (0x623000000720)::::::::::::::::
                    		  left_child: 0x623000000758
                    		 right_child: 0x6230000008a8
                    		        type: STATEMENT | {'$'}
                    			  Line: 0
                    			Indent: 0
                    
                    AddToAsm::
                      {
                      Token token
                      (0x623000000758)::::::::::::::::
                      		  left_child: 0x623000000790
                      		 right_child: (nil)
                      		        type: NATIVE_FUNCTION | {'fout'}
                      			  Line: 0
                      			Indent: 0
                      
                      NativeFunctionHandler::
                        {
                        Token token
                        (0x623000000758)::::::::::::::::
                        		  left_child: 0x623000000790
                        		 right_child: (nil)
                        		        type: NATIVE_FUNCTION | {'fout'}
                        			  Line: 0
                        			Indent: 0
                        
                        ParametrHandler::
                          {
                          Token token
                          (0x623000000790)::::::::::::::::
                          		  left_child: 0x6230000007c8
                          		 right_child: (nil)
                          		        type: PARAMETR | {'$'}
                          			  Line: 0
                          			Indent: 0
                          
                          ExpressionHandler::
                            {
                            Token token
                            (0x6230000007c8)::::::::::::::::
                            		  left_child: 0x623000000800
                            		 right_child: (nil)
                            		        type: CALL | {'$'}
                            			  Line: 0
                            			Indent: 0
                            
                            CallHandler::
                              {
                              Token token
                              (0x6230000007c8)::::::::::::::::
                              		  left_child: 0x623000000800
                              		 right_child: (nil)
                              		        type: CALL | {'$'}
                              			  Line: 0
                              			Indent: 0
                              
                              ArgumentHandler::
                                {
                                Token token
                                (0x623000000838)::::::::::::::::
                                		  left_child: 0x623000000870
                                		 right_child: (nil)
                                		        type: PARAMETR | {'$'}
                                			  Line: 0
                                			Indent: 0
                                
                                ExpressionHandler::
                                  {
                                  Token token
                                  (0x623000000870)::::::::::::::::
                                  		  left_child: (nil)
                                  		 right_child: (nil)
                                  		        type: NAME | {'ded'}
                                  			  Line: 0
                                  			Indent: 0
                                  
                                  NameHandler::
                                    {
                                    Token token
                                    (0x623000000870)::::::::::::::::
                                    		  left_child: (nil)
                                    		 right_child: (nil)
                                    		        type: NAME | {'ded'}
                                    			  Line: 0
                                    			Indent: 0
                                    
                                    }

                                  }

                                }

                              }

                            }

                          }

                        }

                      }

                    AddToAsm::
                      {
                      Token token
                      (0x6230000008a8)::::::::::::::::
                      		  left_child: 0x6230000008e0
                      		 right_child: (nil)
                      		        type: STATEMENT | {'$'}
                      			  Line: 0
                      			Indent: 0
                      
                      AddToAsm::
                        {
                        Token token
                        (0x6230000008e0)::::::::::::::::
                        		  left_child: 0x623000000918
                        		 right_child: (nil)
                        		        type: FUNCTION_RET_TYPE | {'double'}
                        			  Line: 0
                        			Indent: 0
                        
                        FunctionReturnHandler::
                          {
                          Token token
                          (0x6230000008e0)::::::::::::::::
                          		  left_child: 0x623000000918
                          		 right_child: (nil)
                          		        type: FUNCTION_RET_TYPE | {'double'}
                          			  Line: 0
                          			Indent: 0
                          
                          AddToAsm::
                            {
                            Token token
                            (0x623000000918)::::::::::::::::
                            		  left_child: (nil)
                            		 right_child: (nil)
                            		        type: CONSTANT | {'0'}
                            			  Line: 0
                            			Indent: 0
                            
                            ConstantHandler::
                              {
                              Token token
                              (0x623000000918)::::::::::::::::
                              		  left_child: (nil)
                              		 right_child: (nil)
                              		        type: CONSTANT | {'0'}
                              			  Line: 0
                              			Indent: 0
                              
                              }

                            }

                          }

                        }

                      }

                    }

                  }

                }

              }

            }

          AddToAsm::
            {
            Token token
            (0x623000000950)::::::::::::::::
            		  left_child: 0x623000000988
            		 right_child: 0x6230000011d8
            		        type: STATEMENT | {'$'}
            			  Line: 0
            			Indent: 0
            
            AddToAsm::
              {
              Token token
              (0x623000000988)::::::::::::::::
              		  left_child: 0x6230000009c0
              		 right_child: 0x623000000ad8
              		        type: FUNCTION | {''}
              			  Line: 0
              			Indent: 0
              
              FunctionHandler::
                {
                Token token
                (0x623000000988)::::::::::::::::
                		  left_child: 0x6230000009c0
                		 right_child: 0x623000000ad8
                		        type: FUNCTION | {''}
                			  Line: 0
                			Indent: 0
                
                AddToAsm::
                  {
                  Token token
                  (0x6230000009f8)::::::::::::::::
                  		  left_child: 0x623000000a30
                  		 right_child: (nil)
                  		        type: PARAMETR | {'$'}
                  			  Line: 0
                  			Indent: 0
                  
                  ParametrHandler::
                    {
                    Token token
                    (0x6230000009f8)::::::::::::::::
                    		  left_child: 0x623000000a30
                    		 right_child: (nil)
                    		        type: PARAMETR | {'$'}
                    			  Line: 0
                    			Indent: 0
                    
                    }

                  }

                AddToAsm::
                  {
                  Token token
                  (0x623000000ad8)::::::::::::::::
                  		  left_child: 0x623000000b10
                  		 right_child: 0x623000001130
                  		        type: STATEMENT | {'$'}
                  			  Line: 0
                  			Indent: 0
                  
                  AddToAsm::
                    {
                    Token token
                    (0x623000000b10)::::::::::::::::
                    		  left_child: 0x623000000b48
                    		 right_child: 0x623000000bf0
                    		        type: INSTRUCTION | {'if'}
                    			  Line: 0
                    			Indent: 0
                    
                    InstructionHandler::
                      {
                      Token token
                      (0x623000000b10)::::::::::::::::
                      		  left_child: 0x623000000b48
                      		 right_child: 0x623000000bf0
                      		        type: INSTRUCTION | {'if'}
                      			  Line: 0
                      			Indent: 0
                      
                      ExpressionHandler::
                        {
                        Token token
                        (0x623000000b48)::::::::::::::::
                        		  left_child: 0x623000000b80
                        		 right_child: 0x623000000bb8
                        		        type: OPERATOR | {'B'}
                        			  Line: 0
                        			Indent: 0
                        
                        MathOperationsHandler::
                          {
                          Token token
                          (0x623000000b48)::::::::::::::::
                          		  left_child: 0x623000000b80
                          		 right_child: 0x623000000bb8
                          		        type: OPERATOR | {'B'}
                          			  Line: 0
                          			Indent: 0
                          
                          ExpressionHandler::
                            {
                            Token token
                            (0x623000000bb8)::::::::::::::::
                            		  left_child: (nil)
                            		 right_child: (nil)
                            		        type: CONSTANT | {'1'}
                            			  Line: 0
                            			Indent: 0
                            
                            ConstantHandler::
                              {
                              Token token
                              (0x623000000bb8)::::::::::::::::
                              		  left_child: (nil)
                              		 right_child: (nil)
                              		        type: CONSTANT | {'1'}
                              			  Line: 0
                              			Indent: 0
                              
                              }

                            }

                          ExpressionHandler::
                            {
                            Token token
                            (0x623000000b80)::::::::::::::::
                            		  left_child: (nil)
                            		 right_child: (nil)
                            		        type: NAME | {'number'}
                            			  Line: 0
                            			Indent: 0
                            
                            NameHandler::
                              {
                              Token token
                              (0x623000000b80)::::::::::::::::
                              		  left_child: (nil)
                              		 right_child: (nil)
                              		        type: NAME | {'number'}
                              			  Line: 0
                              			Indent: 0
                              
                              }

                            }

                          }

                        }

                      AddToAsm::
                        {
                        Token token
                        (0x623000000bf0)::::::::::::::::
                        		  left_child: 0x623000000c28
                        		 right_child: 0x623000000cd0
                        		        type: STATEMENT | {'$'}
                        			  Line: 0
                        			Indent: 0
                        
                        AddToAsm::
                          {
                          Token token
                          (0x623000000c28)::::::::::::::::
                          		  left_child: 0x623000000c60
                          		 right_child: 0x623000000c98
                          		        type: INITIALIZATOR | {'var'}
                          			  Line: 0
                          			Indent: 0
                          
                          VarInitialization::
                            {
                            Token token
                            (0x623000000c28)::::::::::::::::
                            		  left_child: 0x623000000c60
                            		 right_child: 0x623000000c98
                            		        type: INITIALIZATOR | {'var'}
                            			  Line: 0
                            			Indent: 0
                            
                            AssigmentHandler::
                              {
                              Token token
                              (0x623000000c28)::::::::::::::::
                              		  left_child: 0x623000000c60
                              		 right_child: 0x623000000c98
                              		        type: INITIALIZATOR | {'var'}
                              			  Line: 0
                              			Indent: 0
                              
                              ExpressionHandler::
                                {
                                Token token
                                (0x623000000c98)::::::::::::::::
                                		  left_child: (nil)
                                		 right_child: (nil)
                                		        type: NAME | {'number'}
                                			  Line: 0
                                			Indent: 0
                                
                                NameHandler::
                                  {
                                  Token token
                                  (0x623000000c98)::::::::::::::::
                                  		  left_child: (nil)
                                  		 right_child: (nil)
                                  		        type: NAME | {'number'}
                                  			  Line: 0
                                  			Indent: 0
                                  
                                  }

                                }

                              NameHandler::
                                {
                                Token token
                                (0x623000000c60)::::::::::::::::
                                		  left_child: (nil)
                                		 right_child: (nil)
                                		        type: NAME | {'temp'}
                                			  Line: 0
                                			Indent: 0
                                
                                }

                              }

                            }

                          }

                        AddToAsm::
                          {
                          Token token
                          (0x623000000cd0)::::::::::::::::
                          		  left_child: 0x623000000d08
                          		 right_child: 0x623000000f00
                          		        type: STATEMENT | {'$'}
                          			  Line: 0
                          			Indent: 0
                          
                          AddToAsm::
                            {
                            Token token
                            (0x623000000d08)::::::::::::::::
                            		  left_child: 0x623000000d40
                            		 right_child: (nil)
                            		        type: NATIVE_FUNCTION | {'fout'}
                            			  Line: 0
                            			Indent: 0
                            
                            NativeFunctionHandler::
                              {
                              Token token
                              (0x623000000d08)::::::::::::::::
                              		  left_child: 0x623000000d40
                              		 right_child: (nil)
                              		        type: NATIVE_FUNCTION | {'fout'}
                              			  Line: 0
                              			Indent: 0
                              
                              ParametrHandler::
                                {
                                Token token
                                (0x623000000d40)::::::::::::::::
                                		  left_child: 0x623000000d78
                                		 right_child: (nil)
                                		        type: PARAMETR | {'$'}
                                			  Line: 0
                                			Indent: 0
                                
                                ExpressionHandler::
                                  {
                                  Token token
                                  (0x623000000d78)::::::::::::::::
                                  		  left_child: 0x623000000db0
                                  		 right_child: 0x623000000e58
                                  		        type: OPERATOR | {'+'}
                                  			  Line: 0
                                  			Indent: 0
                                  
                                  MathOperationsHandler::
                                    {
                                    Token token
                                    (0x623000000d78)::::::::::::::::
                                    		  left_child: 0x623000000db0
                                    		 right_child: 0x623000000e58
                                    		        type: OPERATOR | {'+'}
                                    			  Line: 0
                                    			Indent: 0
                                    
                                    ExpressionHandler::
                                      {
                                      Token token
                                      (0x623000000e58)::::::::::::::::
                                      		  left_child: 0x623000000e90
                                      		 right_child: 0x623000000ec8
                                      		        type: OPERATOR | {'L'}
                                      			  Line: 0
                                      			Indent: 0
                                      
                                      MathOperationsHandler::
                                        {
                                        Token token
                                        (0x623000000e58)::::::::::::::::
                                        		  left_child: 0x623000000e90
                                        		 right_child: 0x623000000ec8
                                        		        type: OPERATOR | {'L'}
                                        			  Line: 0
                                        			Indent: 0
                                        
                                        ExpressionHandler::
                                          {
                                          Token token
                                          (0x623000000ec8)::::::::::::::::
                                          		  left_child: (nil)
                                          		 right_child: (nil)
                                          		        type: CONSTANT | {'0'}
                                          			  Line: 0
                                          			Indent: 0
                                          
                                          ConstantHandler::
                                            {
                                            Token token
                                            (0x623000000ec8)::::::::::::::::
                                            		  left_child: (nil)
                                            		 right_child: (nil)
                                            		        type: CONSTANT | {'0'}
                                            			  Line: 0
                                            			Indent: 0
                                            
                                            }

                                          }

                                        ExpressionHandler::
                                          {
                                          Token token
                                          (0x623000000e90)::::::::::::::::
                                          		  left_child: (nil)
                                          		 right_child: (nil)
                                          		        type: NAME | {'number'}
                                          			  Line: 0
                                          			Indent: 0
                                          
                                          NameHandler::
                                            {
                                            Token token
                                            (0x623000000e90)::::::::::::::::
                                            		  left_child: (nil)
                                            		 right_child: (nil)
                                            		        type: NAME | {'number'}
                                            			  Line: 0
                                            			Indent: 0
                                            
                                            }

                                          }

                                        }

                                      }

                                    ExpressionHandler::
                                      {
                                      Token token
                                      (0x623000000db0)::::::::::::::::
                                      		  left_child: 0x623000000de8
                                      		 right_child: 0x623000000e20
                                      		        type: OPERATOR | {'B'}
                                      			  Line: 0
                                      			Indent: 0
                                      
                                      MathOperationsHandler::
                                        {
                                        Token token
                                        (0x623000000db0)::::::::::::::::
                                        		  left_child: 0x623000000de8
                                        		 right_child: 0x623000000e20
                                        		        type: OPERATOR | {'B'}
                                        			  Line: 0
                                        			Indent: 0
                                        
                                        ExpressionHandler::
                                          {
                                          Token token
                                          (0x623000000e20)::::::::::::::::
                                          		  left_child: (nil)
                                          		 right_child: (nil)
                                          		        type: CONSTANT | {'0'}
                                          			  Line: 0
                                          			Indent: 0
                                          
                                          ConstantHandler::
                                            {
                                            Token token
                                            (0x623000000e20)::::::::::::::::
                                            		  left_child: (nil)
                                            		 right_child: (nil)
                                            		        type: CONSTANT | {'0'}
                                            			  Line: 0
                                            			Indent: 0
                                            
                                            }

                                          }

                                        ExpressionHandler::
                                          {
                                          Token token
                                          (0x623000000de8)::::::::::::::::
                                          		  left_child: (nil)
                                          		 right_child: (nil)
                                          		        type: NAME | {'number'}
                                          			  Line: 0
                                          			Indent: 0
                                          
                                          NameHandler::
                                            {
                                            Token token
                                            (0x623000000de8)::::::::::::::::
                                            		  left_child: (nil)
                                            		 right_child: (nil)
                                            		        type: NAME | {'number'}
                                            			  Line: 0
                                            			Indent: 0
                                            
                                            }

                                          }

                                        }

                                      }

                                    }

                                  }

                                }

                              }

                            }

                          AddToAsm::
                            {
                            Token token
                            (0x623000000f00)::::::::::::::::
                            		  left_child: 0x623000000f38
                            		 right_child: (nil)
                            		        type: STATEMENT | {'$'}
                            			  Line: 0
                            			Indent: 0
                            
                            AddToAsm::
                              {
                              Token token
                              (0x623000000f38)::::::::::::::::
                              		  left_child: 0x623000000f70
                              		 right_child: (nil)
                              		        type: FUNCTION_RET_TYPE | {'double'}
                              			  Line: 0
                              			Indent: 0
                              
                              FunctionReturnHandler::
                                {
                                Token token
                                (0x623000000f38)::::::::::::::::
                                		  left_child: 0x623000000f70
                                		 right_child: (nil)
                                		        type: FUNCTION_RET_TYPE | {'double'}
                                			  Line: 0
                                			Indent: 0
                                
                                AddToAsm::
                                  {
                                  Token token
                                  (0x623000000f70)::::::::::::::::
                                  		  left_child: 0x623000000fa8
                                  		 right_child: 0x623000000fe0
                                  		        type: OPERATOR | {'*'}
                                  			  Line: 0
                                  			Indent: 0
                                  
                                  MathOperationsHandler::
                                    {
                                    Token token
                                    (0x623000000f70)::::::::::::::::
                                    		  left_child: 0x623000000fa8
                                    		 right_child: 0x623000000fe0
                                    		        type: OPERATOR | {'*'}
                                    			  Line: 0
                                    			Indent: 0
                                    
                                    ExpressionHandler::
                                      {
                                      Token token
                                      (0x623000000fe0)::::::::::::::::
                                      		  left_child: 0x623000001018
                                      		 right_child: (nil)
                                      		        type: CALL | {'$'}
                                      			  Line: 0
                                      			Indent: 0
                                      
                                      CallHandler::
                                        {
                                        Token token
                                        (0x623000000fe0)::::::::::::::::
                                        		  left_child: 0x623000001018
                                        		 right_child: (nil)
                                        		        type: CALL | {'$'}
                                        			  Line: 0
                                        			Indent: 0
                                        
                                        ArgumentHandler::
                                          {
                                          Token token
                                          (0x623000001050)::::::::::::::::
                                          		  left_child: 0x623000001088
                                          		 right_child: (nil)
                                          		        type: PARAMETR | {'$'}
                                          			  Line: 0
                                          			Indent: 0
                                          
                                          ExpressionHandler::
                                            {
                                            Token token
                                            (0x623000001088)::::::::::::::::
                                            		  left_child: 0x6230000010c0
                                            		 right_child: 0x6230000010f8
                                            		        type: OPERATOR | {'-'}
                                            			  Line: 0
                                            			Indent: 0
                                            
                                            MathOperationsHandler::
                                              {
                                              Token token
                                              (0x623000001088)::::::::::::::::
                                              		  left_child: 0x6230000010c0
                                              		 right_child: 0x6230000010f8
                                              		        type: OPERATOR | {'-'}
                                              			  Line: 0
                                              			Indent: 0
                                              
                                              ExpressionHandler::
                                                {
                                                Token token
                                                (0x6230000010f8)::::::::::::::::
                                                		  left_child: (nil)
                                                		 right_child: (nil)
                                                		        type: CONSTANT | {'1'}
                                                			  Line: 0
                                                			Indent: 0
                                                
                                                ConstantHandler::
                                                  {
                                                  Token token
                                                  (0x6230000010f8)::::::::::::::::
                                                  		  left_child: (nil)
                                                  		 right_child: (nil)
                                                  		        type: CONSTANT | {'1'}
                                                  			  Line: 0
                                                  			Indent: 0
                                                  
                                                  }

                                                }

                                              ExpressionHandler::
                                                {
                                                Token token
                                                (0x6230000010c0)::::::::::::::::
                                                		  left_child: (nil)
                                                		 right_child: (nil)
                                                		        type: NAME | {'number'}
                                                			  Line: 0
                                                			Indent: 0
                                                
                                                NameHandler::
                                                  {
                                                  Token token
                                                  (0x6230000010c0)::::::::::::::::
                                                  		  left_child: (nil)
                                                  		 right_child: (nil)
                                                  		        type: NAME | {'number'}
                                                  			  Line: 0
                                                  			Indent: 0
                                                  
                                                  }

                                                }

                                              }

                                            }

                                          }

                                        }

                                      }

                                    ExpressionHandler::
                                      {
                                      Token token
                                      (0x623000000fa8)::::::::::::::::
                                      		  left_child: (nil)
                                      		 right_child: (nil)
                                      		        type: NAME | {'temp'}
                                      			  Line: 0
                                      			Indent: 0
                                      
                                      NameHandler::
                                        {
                                        Token token
                                        (0x623000000fa8)::::::::::::::::
                                        		  left_child: (nil)
                                        		 right_child: (nil)
                                        		        type: NAME | {'temp'}
                                        			  Line: 0
                                        			Indent: 0
                                        
                                        }

                                      }

                                    }

                                  }

                                }

                              }

                            }

                          }

                        }

                      }

                    }

                  AddToAsm::
                    {
                    Token token
                    (0x623000001130)::::::::::::::::
                    		  left_child: 0x623000001168
                    		 right_child: (nil)
                    		        type: STATEMENT | {'$'}
                    			  Line: 0
                    			Indent: 0
                    
                    AddToAsm::
                      {
                      Token token
                      (0x623000001168)::::::::::::::::
                      		  left_child: 0x6230000011a0
                      		 right_child: (nil)
                      		        type: FUNCTION_RET_TYPE | {'double'}
                      			  Line: 0
                      			Indent: 0
                      
                      FunctionReturnHandler::
                        {
                        Token token
                        (0x623000001168)::::::::::::::::
                        		  left_child: 0x6230000011a0
                        		 right_child: (nil)
                        		        type: FUNCTION_RET_TYPE | {'double'}
                        			  Line: 0
                        			Indent: 0
                        
                        AddToAsm::
                          {
                          Token token
                          (0x6230000011a0)::::::::::::::::
                          		  left_child: (nil)
                          		 right_child: (nil)
                          		        type: CONSTANT | {'1'}
                          			  Line: 0
                          			Indent: 0
                          
                          ConstantHandler::
                            {
                            Token token
                            (0x6230000011a0)::::::::::::::::
                            		  left_child: (nil)
                            		 right_child: (nil)
                            		        type: CONSTANT | {'1'}
                            			  Line: 0
                            			Indent: 0
                            
                            }

                          }

                        }

                      }

                    }

                  }

                }

              }

            AddToAsm::
              {
              Token token
              (0x6230000011d8)::::::::::::::::
              		  left_child: 0x623000001210
              		 right_child: (nil)
              		        type: STATEMENT | {'$'}
              			  Line: 0
              			Indent: 0
              
              AddToAsm::
                {
                Token token
                (0x623000001210)::::::::::::::::
                		  left_child: 0x623000001248
                		 right_child: 0x623000001280
                		        type: INITIALIZATOR | {'var'}
                			  Line: 0
                			Indent: 0
                
                VarInitialization::
                  {
                  Token token
                  (0x623000001210)::::::::::::::::
                  		  left_child: 0x623000001248
                  		 right_child: 0x623000001280
                  		        type: INITIALIZATOR | {'var'}
                  			  Line: 0
                  			Indent: 0
                  
                  CopyLabel::
                    {
                    IsLabel::
                      {
                      	type: 7
                      	name_id: 9
                      }

                    LOG CALLOC:     {0x603000000460} = calloc (1, 32 = 32) from CopyLabel:132, at ../Common/Structures/Tabels/NameTable.cpp:132
                    AddLabel::
                      {
                      }

                    }

                  }

                }

              }

            }

          }

        }

      }

    InitGlobalVars::
      {
      VarInitialization::
        {
        Token token
        (0x623000000138)::::::::::::::::
        		  left_child: 0x623000000170
        		 right_child: 0x6230000001a8
        		        type: INITIALIZATOR | {'var'}
        			  Line: 0
        			Indent: 0
        
        AssigmentHandler::
          {
          Token token
          (0x623000000138)::::::::::::::::
          		  left_child: 0x623000000170
          		 right_child: 0x6230000001a8
          		        type: INITIALIZATOR | {'var'}
          			  Line: 0
          			Indent: 0
          
          ExpressionHandler::
            {
            Token token
            (0x6230000001a8)::::::::::::::::
            		  left_child: (nil)
            		 right_child: (nil)
            		        type: CONSTANT | {'-1'}
            			  Line: 0
            			Indent: 0
            
            ConstantHandler::
              {
              Token token
              (0x6230000001a8)::::::::::::::::
              		  left_child: (nil)
              		 right_child: (nil)
              		        type: CONSTANT | {'-1'}
              			  Line: 0
              			Indent: 0
              
              }

            }

          NameHandler::
            {
            Token token
            (0x623000000170)::::::::::::::::
            		  left_child: (nil)
            		 right_child: (nil)
            		        type: NAME | {'dedperdes'}
            			  Line: 0
            			Indent: 0
            
            }

          }

        }

      VarInitialization::
        {
        Token token
        (0x623000000218)::::::::::::::::
        		  left_child: 0x623000000250
        		 right_child: 0x623000000288
        		        type: INITIALIZATOR | {'var'}
        			  Line: 0
        			Indent: 0
        
        AssigmentHandler::
          {
          Token token
          (0x623000000218)::::::::::::::::
          		  left_child: 0x623000000250
          		 right_child: 0x623000000288
          		        type: INITIALIZATOR | {'var'}
          			  Line: 0
          			Indent: 0
          
          ExpressionHandler::
            {
            Token token
            (0x623000000288)::::::::::::::::
            		  left_child: (nil)
            		 right_child: (nil)
            		        type: CONSTANT | {'0'}
            			  Line: 0
            			Indent: 0
            
            ConstantHandler::
              {
              Token token
              (0x623000000288)::::::::::::::::
              		  left_child: (nil)
              		 right_child: (nil)
              		        type: CONSTANT | {'0'}
              			  Line: 0
              			Indent: 0
              
              }

            }

          NameHandler::
            {
            Token token
            (0x623000000250)::::::::::::::::
            		  left_child: (nil)
            		 right_child: (nil)
            		        type: NAME | {'hellov'}
            			  Line: 0
            			Indent: 0
            
            }

          }

        }

      VarInitialization::
        {
        Token token
        (0x623000001210)::::::::::::::::
        		  left_child: 0x623000001248
        		 right_child: 0x623000001280
        		        type: INITIALIZATOR | {'var'}
        			  Line: 0
        			Indent: 0
        
        AssigmentHandler::
          {
          Token token
          (0x623000001210)::::::::::::::::
          		  left_child: 0x623000001248
          		 right_child: 0x623000001280
          		        type: INITIALIZATOR | {'var'}
          			  Line: 0
          			Indent: 0
          
          ExpressionHandler::
            {
            Token token
            (0x623000001280)::::::::::::::::
            		  left_child: 0x6230000012b8
            		 right_child: 0x6230000012f0
            		        type: OPERATOR | {'*'}
            			  Line: 0
            			Indent: 0
            
            MathOperationsHandler::
              {
              Token token
              (0x623000001280)::::::::::::::::
              		  left_child: 0x6230000012b8
              		 right_child: 0x6230000012f0
              		        type: OPERATOR | {'*'}
              			  Line: 0
              			Indent: 0
              
              ExpressionHandler::
                {
                Token token
                (0x6230000012f0)::::::::::::::::
                		  left_child: 0x623000001328
                		 right_child: (nil)
                		        type: CALL | {'$'}
                			  Line: 0
                			Indent: 0
                
                CallHandler::
                  {
                  Token token
                  (0x6230000012f0)::::::::::::::::
                  		  left_child: 0x623000001328
                  		 right_child: (nil)
                  		        type: CALL | {'$'}
                  			  Line: 0
                  			Indent: 0
                  
                  ArgumentHandler::
                    {
                    Token token
                    (0x623000001360)::::::::::::::::
                    		  left_child: 0x623000001398
                    		 right_child: (nil)
                    		        type: PARAMETR | {'$'}
                    			  Line: 0
                    			Indent: 0
                    
                    ExpressionHandler::
                      {
                      Token token
                      (0x623000001398)::::::::::::::::
                      		  left_child: (nil)
                      		 right_child: (nil)
                      		        type: NAME | {'hellov'}
                      			  Line: 0
                      			Indent: 0
                      
                      NameHandler::
                        {
                        Token token
                        (0x623000001398)::::::::::::::::
                        		  left_child: (nil)
                        		 right_child: (nil)
                        		        type: NAME | {'hellov'}
                        			  Line: 0
                        			Indent: 0
                        
                        }

                      }

                    }

                  }

                }

              ExpressionHandler::
                {
                Token token
                (0x6230000012b8)::::::::::::::::
                		  left_child: (nil)
                		 right_child: (nil)
                		        type: CONSTANT | {'84'}
                			  Line: 0
                			Indent: 0
                
                ConstantHandler::
                  {
                  Token token
                  (0x6230000012b8)::::::::::::::::
                  		  left_child: (nil)
                  		 right_child: (nil)
                  		        type: CONSTANT | {'84'}
                  			  Line: 0
                  			Indent: 0
                  
                  }

                }

              }

            }

          NameHandler::
            {
            Token token
            (0x623000001248)::::::::::::::::
            		  left_child: (nil)
            		 right_child: (nil)
            		        type: NAME | {'uselles'}
            			  Line: 0
            			Indent: 0
            
            }

          }

        }

      }

    LOG FREE(kill): {0x603000000400} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x603000000430} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x603000000460} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x6070000002c0} - will be freed from CloseNameTable:67, at ../Common/Structures/Tabels/NameTable.cpp:67
    LOG FREE(kill): {0x6030000003d0} - will be freed from CloseNameTable:68, at ../Common/Structures/Tabels/NameTable.cpp:68

    TranslateToAsm:88 returned SUCCESS (return 0;)
    }

  ProgramDtor::
    {
    LOG FREE(kill): {0x602000000030} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x602000000050} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x602000000070} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x602000000090} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x6020000000b0} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x6020000000d0} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x6020000000f0} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x602000000110} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x602000000130} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x602000000150} - will be freed from CleanStringArr:64, at ../Common/Structures/Program/Program.cpp:64
    LOG FREE(kill): {0x619000000f80} - will be freed from ProgramDtor:34, at ../Common/Structures/Program/Program.cpp:34
    LOG FREE(kill): {0x623000000100} - will be freed from ProgramDtor:39, at ../Common/Structures/Program/Program.cpp:39
    LOG FREE(kill): {0x603000000190} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x6030000001c0} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x6030000002b0} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x603000000370} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x6030000003a0} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x607000000100} - will be freed from CloseNameTable:67, at ../Common/Structures/Tabels/NameTable.cpp:67
    LOG FREE(kill): {0x603000000130} - will be freed from CloseNameTable:68, at ../Common/Structures/Tabels/NameTable.cpp:68
    LOG FREE(kill): {0x607000000170} - will be freed from CloseNameTable:67, at ../Common/Structures/Tabels/NameTable.cpp:67
    LOG FREE(kill): {0x603000000160} - will be freed from CloseNameTable:68, at ../Common/Structures/Tabels/NameTable.cpp:68
    LOG FREE(kill): {0x603000000220} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x603000000250} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x603000000280} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x6070000001e0} - will be freed from CloseNameTable:67, at ../Common/Structures/Tabels/NameTable.cpp:67
    LOG FREE(kill): {0x6030000001f0} - will be freed from CloseNameTable:68, at ../Common/Structures/Tabels/NameTable.cpp:68
    LOG FREE(kill): {0x603000000310} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x603000000340} - will be freed from CloseNameTable:64, at ../Common/Structures/Tabels/NameTable.cpp:64
    LOG FREE(kill): {0x607000000250} - will be freed from CloseNameTable:67, at ../Common/Structures/Tabels/NameTable.cpp:67
    LOG FREE(kill): {0x6030000002e0} - will be freed from CloseNameTable:68, at ../Common/Structures/Tabels/NameTable.cpp:68
    LOG FREE(kill): {0x604000000010} - will be freed from DeleteNameTableArr:256, at ../Common/Structures/Tabels/NameTable.cpp:256
    LOG FREE(kill): {0x602000000170} - will be freed from DeleteNameTableArr:257, at ../Common/Structures/Tabels/NameTable.cpp:257
    }

  }

*********************************************************************
		Log Successfuly ended, on Wed Dec 21 02:34:07 2022
*********************************************************************

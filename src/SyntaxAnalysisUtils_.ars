// UTILS

static Token* VarInitialization (ProgramCtx* program_buf);
static int   FuncInitialization (ProgramCtx* program_buf);


static FuncLabel* MakeFuncLabel (ProgramCtx* program_buf, Token** func_head);
static VarLabel*  MakeVarLabel  (ProgramCtx* program_buf);

static int DefineName (ProgramCtx* program_buf);

///////////////////////////////////////////////////////////////////////////
static int DefineName(ProgramCtx* program_buf)
    {
    assertlog(program_buf, EFAULT, return NOT_DECLARED);

    if (TYPE(token) != NAME)
        {
        report_syntax_error("Not a name\n");
        return NOT_DECLARED;
        }

    // what if function and variable has same name ? 
    if (IsFuncLabel (NAME_ID(token), FUNC_TABEL(program_buf)))
        {
        TYPE(token) = FUNCTION;
        return FUNCTION;
        }

    if (GetVarLabel (NAME_ID(token), VAR_TABELS_STK(program_buf)))
        {
        TYPE(token) = VARIABLE;
        return VARIABLE;
        }

    report_syntax_error("'%s' wasn't decalred\n", STRING_ARR(program_buf)[NAME_ID(token)]);
    
    return NOT_DECLARED;
    } 

static FuncLabel* MakeFuncLabel(ProgramCtx* program_buf, Token** func_head)
    {
    assertlog(program_buf, EFAULT, return LNULL);
    assertlog(func_head,   EFAULT, return LNULL);

    FuncLabel* label = (FuncLabel*) CALLOC (1, sizeof(label[0]));
    if (!label) return LNULL;

    if (TYPE(token) != FUNCTION_RET_TYPE)
        {
        report_syntax_error("No return type in function\n");
        return LNULL;
        }
    
    Token* ret_type = token;
    POSITION(program_buf)++;

    label->ret_type = RET_TYPE(ret_type);

    if (TYPE(token) != NAME)
        {
        report_syntax_error("No function name\n");
        return LNULL;
        }

    Token* name = token;
    POSITION(program_buf)++;

    label->name = NAME_ID(name);
            
    // argument
    if(TYPE(token) != EXPRESSION_OPENING_BRACKET)
        {
        report_syntax_error("Missing '(' in function prototype\n");
        return LNULL;
        }
    POSITION(program_buf)++;
    // TO_DO

    if(TYPE(token) != EXPRESSION_CLOSING_BRACKET)
       {
       report_syntax_error("Missing ')' in function \n");
       return LNULL;
       }
    POSITION(program_buf)++;

    // set func_head
    RIGHT(name) = ret_type;

    *func_head = name;

    return label;
    } 

static VarLabel* MakeVarLabel(ProgramCtx* program_buf)
    {
    $log(1)
    assertlog(program_buf, EFAULT, return LNULL);

    VarLabel* label = (VarLabel*) CALLOC (1, sizeof(label[0]));
    if (!label) return LNULL;

    if (TYPE(token) != NAME)
        {
        report_syntax_error("Ebat, not a name for variable initialization\n", STRING_ARR(program_buf)[NAME_ID(token)]);
        return LNULL;
        }

    label->name_id =  NAME_ID(token);

    return label;
    }

/*
static Token* FuncLabelToTokens (FuncLabel* label)
    {
    assertlog(label, EFAULT, return LNULL);

    Token* name = NewToken (NAME, {.t_name_id = label->name});
    
    RIGHT(name) = NewToken (FUNCTION_RET_TYPE, {.t_function_ret_type = label->ret_type});

    / NOT NOW
    Token* temp = NewToken(
    for(int i = 0; i < label->number_of_arguments; i++)
        {

    /

    return name;
    }
*/


